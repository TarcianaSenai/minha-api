GIT - GUIA PR√ÅTICO COMPLETO
Tudo o que voc√™ precisa saber para come√ßar com Git, sem complica√ß√µes üòâ

=======================================================
1. INTRODU√á√ÉO AO GIT
=======================================================
Git √© um sistema de controle de vers√£o distribu√≠do, criado por Linus Torvalds em 2005, para gerenciar o kernel do Linux.

Ele permite que v√°rias pessoas trabalhem em um projeto simultaneamente, controlando o hist√≥rico de mudan√ßas no c√≥digo-fonte.

=======================================================
2. CONCEITOS FUNDAMENTAIS
=======================================================
üîπ Reposit√≥rio
Local onde o Git armazena arquivos e hist√≥rico de vers√µes.
- Local: em seu computador.
- Remoto: em servidores como GitHub, GitLab ou Bitbucket.

üîπ Commit
Uma ‚Äúfoto‚Äù dos arquivos em um momento. Representa uma vers√£o registrada do projeto.

üîπ Branch (Ramifica√ß√£o)
Linha paralela de desenvolvimento. Ideal para criar funcionalidades sem afetar a principal (geralmente a `main`).

üîπ Merge
Mescla o c√≥digo de uma branch em outra.

üîπ Clone
Copia um reposit√≥rio remoto para sua m√°quina local.

üîπ Push
Envia altera√ß√µes locais para o reposit√≥rio remoto.

üîπ Pull
Traz atualiza√ß√µes do reposit√≥rio remoto para sua m√°quina.

=======================================================
3. INSTALA√á√ÉO DO GIT
=======================================================
üì¶ Instale o Git:
- Windows: https://git-scm.com/download/win
- macOS: https://git-scm.com/download/mac
- Linux: `sudo apt install git`

Verifique a instala√ß√£o:
    git --version

=======================================================
4. CONFIGURA√á√ÉO INICIAL
=======================================================
    git config --global user.name "Seu Nome"
    git config --global user.email "seuemail@exemplo.com"

=======================================================
5. CRIANDO UM REPOSIT√ìRIO
=======================================================
Crie e acesse a pasta do projeto:
    mkdir meu-projeto
    cd meu-projeto
Inicie o Git:
    git init

=======================================================
6. ADICIONANDO ARQUIVOS E COMMITANDO
=======================================================
Crie um arquivo:
    echo "<h1>Ol√° Git!</h1>" > index.html

Veja o status:
    git status

Adicione o arquivo:
    git add index.html

Confirme as mudan√ßas:
    git commit -m "Adiciona o arquivo index.html"

=======================================================
7. HIST√ìRICO DE COMMITS
=======================================================
Visualize o hist√≥rico:
    git log

=======================================================
8. RAMOS (BRANCHES)
=======================================================
Criar e mudar para uma nova branch:
    git checkout -b nova-feature

Voltar para a branch principal:
    git checkout main

Mesclar a nova branch:
    git merge nova-feature

Deletar uma branch:
    git branch -d nova-feature

Enviar uma branch nova para o GitHub:
    git push origin nova-feature

=======================================================
9. REPOSIT√ìRIOS REMOTOS (GITHUB)
=======================================================
No GitHub:
- V√° em https://github.com
- Clique em ‚ÄúNew Repository‚Äù
- Crie o reposit√≥rio

Conecte com o reposit√≥rio local:
    git remote add origin https://github.com/usuario/repositorio.git
    git branch -M main
    git push -u origin main

=======================================================
10. CLONANDO REPOSIT√ìRIOS
=======================================================
    git clone https://github.com/usuario/repositorio.git

=======================================================
11. ATUALIZANDO SEU C√ìDIGO LOCAL
=======================================================
    git pull origin main

=======================================================
12. ENVIANDO MUDAN√áAS PARA O GITHUB
=======================================================
    git add .
    git commit -m "Descri√ß√£o das altera√ß√µes"
    git push origin main

=======================================================
13. IGNORANDO ARQUIVOS (.gitignore)
=======================================================
Crie o arquivo `.gitignore` com conte√∫do como:
    node_modules/
    .env
    *.log

Esses itens ser√£o ignorados pelo Git.

=======================================================
14. RESOLVENDO CONFLITOS
=======================================================
Se ao fazer merge houver conflitos:
- O Git avisar√° quais arquivos est√£o em conflito.
- Edite os arquivos manualmente e remova as marca√ß√µes:
  <<<<<<< HEAD, =======, >>>>>>>>
- Ap√≥s resolver:
    git add <arquivo>
    git commit -m "Resolve conflito"

=======================================================
15. ROTULANDO VERS√ïES (TAGS)
=======================================================
Para criar uma tag de vers√£o:
    git tag -a v1.0 -m "Vers√£o est√°vel"

Para referenciar um commit espec√≠fico:
    git tag v1.0.0 1b2e1d63ff
(Use `git log` para pegar o ID do commit)

=======================================================
16. DESCARTANDO ALTERA√á√ïES LOCAIS
=======================================================
Para descartar altera√ß√µes de um arquivo:
    git checkout -- <arquivo>

Para desfazer tudo e voltar ao estado do servidor:
    git fetch origin
    git reset --hard origin/main

=======================================================
17. STASH (GUARDAR MUDAN√áAS TEMPORARIAMENTE)
=======================================================
Guardar mudan√ßas que ainda n√£o quer commitar:
    git stash

Restaurar depois:
    git stash pop

=======================================================
18. DICAS √öTEIS
=======================================================
üîπ Interface gr√°fica:
    gitk

üîπ Ativar cores:
    git config --global color.ui true

üîπ Exibir commits em uma linha:
    git log --oneline

üîπ Inclus√£o interativa:
    git add -i

=======================================================
19. EXEMPLO COMPLETO
=======================================================
# Cria pasta e inicia projeto
mkdir site
cd site
git init

# Cria e adiciona arquivo
echo "<h1>Meu site</h1>" > index.html
git add index.html
git commit -m "Cria p√°gina inicial"

# Conecta ao GitHub e envia
git remote add origin https://github.com/seunome/site.git
git branch -M main
git push -u origin main

=======================================================
20. BOAS PR√ÅTICAS
=======================================================
‚úîÔ∏è Fa√ßa commits pequenos e frequentes  
‚úîÔ∏è Escreva mensagens claras  
‚úîÔ∏è Use branches para cada nova funcionalidade  
‚úîÔ∏è Sempre fa√ßa `git pull` antes do `git push`  
‚úîÔ∏è Nunca apague branches antes de confirmar se foram mescladas  

---

Com isso, voc√™ tem um guia pr√°tico e completo sobre Git. Ideal para iniciantes e muito √∫til para revis√µes r√°pidas! üöÄ
